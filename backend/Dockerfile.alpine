# ================================
# Build Stage
# ================================
FROM python:3.10-alpine as builder

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    postgresql-dev \
    gdal-dev \
    geos-dev \
    proj-dev \
    musl-dev \
    linux-headers \
    gcc \
    g++ \
    libffi-dev

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
COPY requirements.prod.txt /tmp/
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir wheel \
    && pip install --no-cache-dir -r /tmp/requirements.prod.txt \
    && pip install --no-cache-dir gunicorn

# ================================
# Production Stage
# ================================
FROM python:3.10-alpine

# Install only runtime dependencies
RUN apk add --no-cache \
    postgresql-client \
    gdal \
    geos \
    proj \
    libpq \
    && rm -rf /var/cache/apk/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Create non-root user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# Set work directory
WORKDIR /app

# Copy application code
COPY --chown=appuser:appgroup manage.py /app/
COPY --chown=appuser:appgroup geoanalysis/ /app/geoanalysis/
COPY --chown=appuser:appgroup apps/ /app/apps/
COPY --chown=appuser:appgroup auth/ /app/auth/
COPY --chown=appuser:appgroup tests/ /app/tests/
COPY --chown=appuser:appgroup support/ /app/support/

# Create directories with proper permissions
RUN mkdir -p /app/staticfiles /app/media /app/logs && \
    chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/health/', timeout=10)" || exit 1

# Expose port
EXPOSE 8000

# Use gunicorn with optimized settings
CMD ["gunicorn", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "2", \
     "--worker-class", "sync", \
     "--worker-connections", "1000", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--timeout", "120", \
     "--keep-alive", "5", \
     "--log-level", "info", \
     "geoanalysis.wsgi:application"]